/* CRIANDO AO BANCO */ 

CREATE DATABASE EMPRESA;
GO

/* CONECTANDO AO BANCO */ 

USE EMPRESA
GO

/* CRIACAO DE TABELAS */

CREATE TABLE ALUNO(
	IDALUNO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	NASCIMENTO DATE NOT NULL,
	EMAIL VARCHAR(30) UNIQUE
)
GO

/* CONSTRAINTS */
ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN('M', 'F'))
GO

/* 1 X 1 */

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY IDENTITY(100,10),
	BAIRRO VARCHAR(30),
	UF CHAR(2) NOT NULL
	CHECK (UF IN('RJ', 'SP', 'MG')),
	ID_ALUNO INT UNIQUE
)
GO

/* CRIANDO A FK */
ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO

/* COMANDO DE DESCRICAO */
-- DESC OR SHOW TABLE IN MYSQL

/* PROCEDURES - JA CRIADAS E ARMAZENADAS EM SISTEMA, COMEÇAM COM SP DE 
 STORAGE PROCEDURE */

SP_COLUMNS ALUNO
GO

SP_HELP ALUNO
GO

/* INSERINDO DADOS */
INSERT INTO ALUNO VALUES
	('ANDRE', 'M', '1981/12/09', 'ANDRE@IG.COM'),
	('ANA', 'M', '1978/03/08', 'ANA@IG.COM'),
	('RUI', 'M', '1965/07/07', 'RUI@IG.COM'),
	('JOAO', 'M', '2002/11/06', 'JOAO@IG.COM')
GO

INSERT INTO ALUNO VALUES
	('MARIA', 'M', '1984-12-11', 'MARIA@IG.COM')
GO

/* INSERT ENDERECO */
INSERT INTO ENDERECO VALUES
	('FLAMENGO', 'RJ', 9),
	('MORUMBI', 'SP', 10),
	('CENTRO', 'MG', 11),
	('CENTRO', 'SP', 12),
	('GUARULHOS', 'SP', 13)
GO

SELECT * FROM ENDERECO
GO

/* CRIANDO TABELA TELEFONE */
CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_ALUNO INT,
	CHECK (TIPO IN ('RES', 'COM', 'CEL'))
)
GO

INSERT INTO TELEFONE VALUES
	('CEL', '7899889', 9),
	('RES', '4325444', 9),
	('COM', '4354345', 10),
	('CEL', '2344556', 10)
GO

SELECT * FROM TELEFONE;

SELECT * FROM ALUNO a
GO

/* PEGAR A DATA ATUAL */

SELECT GETDATE()
GO

/* CLAUSULA AMBIGUA */

SELECT A.NOME, 
	   ISNULL(T.TIPO, 'SEM') AS TIPO, 
	   ISNULL(T.NUMERO, 'NUMERO') AS TELEFONE, 
	   E.BAIRRO, 
	   E.UF
FROM ALUNO A
LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
LEFT JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/* DATAS */
SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO, E.UF
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO 
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO 
GO

SELECT * FROM ALUNO a
GO

SELECT NOME, NASCIMENTO FROM ALUNO a
GO

/* DATEDIFF - CALCULA DIFERENÇA ENTRE 2 DATAS 
 FUNÇÃO GETDATE() TRAZ DIA E HORA */

SELECT NOME, GETDATE() AS DIA_HORA FROM ALUNO A 
GO

/* PRIMEIRO PASSO */
SELECT A.NOME, DATEDIFF(DAY, A.NASCIMENTO, GETDATE())
FROM ALUNO A
GO

/* SEGUNDO PASSO */
SELECT NOME, DATEDIFF(DAY, A.NASCIMENTO, GETDATE()) AS "IDADE"
FROM ALUNO A
GO

SELECT NOME, DATEDIFF(DAY, A.NASCIMENTO, GETDATE()) AS IDADE
FROM ALUNO A
GO

SELECT NOME, DATEDIFF(DAY, A.NASCIMENTO, GETDATE()) IDADE
FROM ALUNO A
GO

/* 3 PASSO - RETORNO INTEIRO + OPERAÇÃO MATEMÁTICA */
SELECT NOME, (DATEDIFF(DAY, A.NASCIMENTO, GETDATE())/365) AS IDADE
FROM ALUNO A
GO

SELECT NOME, (DATEDIFF(MONTH, A.NASCIMENTO, GETDATE())/12) AS IDADE
FROM ALUNO A
GO

SELECT NOME, DATEDIFF(YEAR, A.NASCIMENTO, GETDATE()) AS IDADE
FROM ALUNO A
GO

/* DATENAME - TRAS O NOEM DA PARTE DA DATA EM QUESTÃO */

SELECT NOME, DATENAME(MONTH, NASCIMENTO)
FROM ALUNO A
GO

SELECT NOME, DATENAME(YEAR, NASCIMENTO)
FROM ALUNO A
GO

SELECT NOME, DATENAME(DAY, NASCIMENTO)
FROM ALUNO A
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO)
FROM ALUNO A
GO

/* DATEPART - POREM O RETORNO É UM INTEIRO */

SELECT NOME, DATEPART(MONTH, NASCIMENTO), DATENAME(MONTH, NASCIMENTO)
FROM ALUNO A
GO

/* DATEADD - RETORNA UMA DATA SOMANDO OUTRA */

SELECT DATEADD(DAY, 365, GETDATE())
GO

SELECT DATEADD(YEAR, 10, GETDATE())
GO

SELECT DATEADD(MONTH, 3, GETDATE())
GO

/* CONVERSÃO DE DADOS */

SELECT 1 + '1'
GO

SELECT '1' + '1'
GO

SELECT 'CURSO DE BANCO DE DADOS' + '1'
GO

SELECT 'CURSO DE BANCO DE DADOS' + 1
GO

/* FUNCOES DE CONVERSAO DE DADOS */

SELECT CAST('1' AS INT) + CAST('1' AS INT)
GO

/* CONVERSAO E CONCATENACAO */

SELECT NOME, 
NASCIMENTO
FROM ALUNO
GO

SELECT NOME, 
DAY(NASCIMENTO) + '/' + MONTH(NASCIMENTO) + '/' + YEAR(NASCIMENTO) /* ERRO */
FROM ALUNO
GO

/* EXERCICIO DATA DD/MM/YYYY */
SELECT NOME, 
CAST(DAY(NASCIMENTO) AS VARCHAR) + '/' + CAST(MONTH(NASCIMENTO) AS VARCHAR) + '/' + CAST(YEAR(NASCIMENTO) AS VARCHAR)
FROM ALUNO
GO

/* SOLUCAO DANIEL */
SELECT NOME, 
FORMAT(NASCIMENTO, 'dd/MM/yyyy')
FROM ALUNO
GO

/* CHARINDEX - RETORNA UM INTEIRO 
CONTAGEM DEFAULT - INICIA EM 01, PRIMEIRA POSIÇÃO
*/

SELECT NOME, CHARINDEX('A', NOME, 2) AS INDICE
FROM ALUNO a
GO

/* BULK INSERT - IMPORTACAO DE ARQUIVOS */

CREATE TABLE LANCAMENTO_CONTABIL(
    CONTA BIGINT,
    VALOR BIGINT,
    DEB_CRED VARCHAR(MAX)
);
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

/* \t = TAB */

-- LINK PARA DOCKER: https://stackoverflow.com/questions/59013661/cannot-bulk-load-the-file-does-not-exist-or-you-dont-have-file-access-rights

BULK INSERT LANCAMENTO_CONTABIL
FROM '/tmp/CONTAS.txt'
WITH(
    FIRSTROW = 2,
    DATAFILETYPE = 'char',
    FIELDTERMINATOR = '\t',
    ROWTERMINATOR = '\n'
)

SELECT * FROM LANCAMENTO_CONTABIL
GO

/* DESAFIO DO SALDO
NUMERO DA CONTA
E SALDO - DEVEDOR OU CREDOR
*/

SELECT CONTA, DEB_CRED, SUM(VALOR) FROM LANCAMENTO_CONTABIL
GROUP BY CONTA, DEB_CRED
ORDER BY CONTA

SELECT CONTA, 
SUM(VALOR * (IIF(CHARINDEX('C', DEB_CRED) = 1, 1, -1))) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY 1

/* SOLUCAO PROFESSOR */
SELECT CONTA, VALOR, DEB_CRED,
CHARINDEX('D', DEB_CRED) AS DEBITO,
CHARINDEX('C', DEB_CRED) AS CREDITO,
CHARINDEX('C', DEB_CRED) * 2 - 1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('C', DEB_CRED) * 2 - 1)) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY 1
GO